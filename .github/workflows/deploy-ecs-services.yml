name: Deploy ECS Services

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'  # A cada 5 minutos, verifica a fila

# Um deployment por vez
concurrency:
  group: ecs-deployment-processor
  cancel-in-progress: false

jobs:
  process-queue:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.INFRA_REPO_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js and PNPM
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 9
     
    - name: Install dependencies
      run: pnpm install --frozen-lockfile --ignore-scripts
     
    - name: Setup Pulumi
      uses: pulumi/actions@v4
      with:
        pulumi-version: ^3.0.0
    
    - name: Process deployment queue
      env:
        PULUMI_CONFIG_PASSPHRASE: ""
        OAUTH_PRIVATE_KEY: ${{ secrets.STG_OAUTH_PRIVATE_KEY }}
        OAUTH_PUBLIC_KEY: ${{ secrets.STG_OAUTH_PUBLIC_KEY }}
      run: |
        git config user.email "ci@valornet.com"
        git config user.name "CI/CD Bot"
        
        QUEUE_DIR=".github/deployment-queue"
        
        if [ ! -d "$QUEUE_DIR" ] || [ -z "$(ls -A $QUEUE_DIR 2>/dev/null)" ]; then
          echo "‚ÑπÔ∏è Fila vazia"
          exit 0
        fi
        
        pulumi login s3://valornet-pulumi-backend
        
        # Processar cada arquivo na fila (ordem alfab√©tica = ordem cronol√≥gica)
        for REQUEST_FILE in $(ls $QUEUE_DIR/*.json | sort); do
          echo "=========================================="
          echo "üì¶ Processando: $(basename $REQUEST_FILE)"
          echo "=========================================="
          
          # Ler dados do request
          IMAGE_TAG=$(jq -r '.image_tag' "$REQUEST_FILE")
          SERVICE_NAME=$(jq -r '.service_name' "$REQUEST_FILE")
          STACK=$(jq -r '.stack' "$REQUEST_FILE")
          COMMIT_SHA=$(jq -r '.commit_sha' "$REQUEST_FILE")
          
          echo "üéØ Servi√ßo: $SERVICE_NAME"
          echo "üè∑Ô∏è Tag: $IMAGE_TAG"
          echo "üì¶ Stack: $STACK"
          
          # Atualizar Pulumi config
          pulumi stack select "$STACK"
          
          SERVICE_NAME_BASE=${SERVICE_NAME%-*}
          PULUMI_SERVICE_NAME_BASE=${SERVICE_NAME_BASE%-worker}
          
          CONFIG_KEY="valornet-infra:${PULUMI_SERVICE_NAME_BASE}.imageTag"
          pulumi config set ${CONFIG_KEY} $IMAGE_TAG
          
          # Commit das mudan√ßas do Pulumi
          git add "Pulumi.${STACK}.yaml"
          
          if ! git diff --staged --quiet; then
            git commit -m "ü§ñ ci: deploy ${SERVICE_NAME} with tag ${IMAGE_TAG}
            
            üì¶ Stack: ${STACK}
            üè∑Ô∏è Image Tag: ${IMAGE_TAG}
            üìù Commit SHA: ${COMMIT_SHA}"
            
            git push origin main || {
              echo "‚ö†Ô∏è Push falhou, fazendo pull e tentando novamente"
              git checkout -- pnpm-lock.yaml 2>/dev/null || true
              git pull origin main --rebase
              git push origin main
            }
            
            echo "‚úÖ Configura√ß√£o Pulumi commitada"
          else
            echo "‚ÑπÔ∏è Configura√ß√£o Pulumi j√° est√° atualizada"
          fi
          
          # Deploy com Pulumi
          echo "üöÄ Executando Pulumi Up..."
          pulumi install
          pulumi up --yes --stack "$STACK" \
            --target "urn:pulumi:${STACK}::infra::awsx:ecs:FargateService::${SERVICE_NAME_BASE}" \
            --target-dependents
          
          # Remover da fila
          echo "üßπ Removendo da fila..."
          
          # Descartar mudan√ßas do Pulumi antes de fazer pull
          git checkout -- pnpm-lock.yaml 2>/dev/null || true
          git pull origin main --rebase
          
          if [ -f "$REQUEST_FILE" ]; then
            rm "$REQUEST_FILE"
            git add "$REQUEST_FILE"
            
            if ! git diff --staged --quiet; then
              git commit -m "‚úÖ Deployment conclu√≠do: ${SERVICE_NAME}"
              git push origin main || {
                echo "‚ö†Ô∏è Push falhou, fazendo pull e tentando novamente"
                git checkout -- pnpm-lock.yaml 2>/dev/null || true
                git pull origin main --rebase
                git push origin main
              }
              echo "‚úÖ Push realizado com sucesso"
            else
              echo "‚ÑπÔ∏è Nenhuma mudan√ßa para commitar (arquivo j√° foi removido)"
            fi
          else
            echo "‚ÑπÔ∏è Arquivo j√° foi processado por outra execu√ß√£o"
          fi
          
          echo "‚úÖ Deployment conclu√≠do!"
          echo ""
        done
        
        echo "üéâ Todos os deployments processados!"