name: Update ECS Service Image

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
      service_name:
        description: 'Service name'
        required: true
      stack:
        description: 'Stack name'
        required: true
      commit_sha:
        description: 'Commit SHA'
        required: true
      ecr_repository:
        description: 'ECR Repository'
        required: true
      ecr_nginx_repository:
        description: 'ECR Nginx Repository'
        required: true
      ecs_cluster:
        description: 'ECS Cluster'
        required: true
      pulumi_service_name:
        description: 'Pulumi Service Name'
        required: true

jobs:
  update-service:
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: true 
      
    - name: Setup Pulumi
      uses: pulumi/actions@v4
      with:
        pulumi-version: ^3.0.0
        
    - name: Update Pulumi config and ECS Service
      env:
        PULUMI_CONFIG_PASSPHRASE: ""
        PULUMI_BACKEND_URL: ${{ secrets.PULUMI_BACKEND_URL }}
      run: |
        echo "üîÑ Atualizando imagem do servi√ßo: ${{ github.event.inputs.service_name }}"
        echo "üè∑Ô∏è Nova imagem tag: ${{ github.event.inputs.image_tag }}"
        
        # Definir vari√°veis
        CLUSTER_NAME="${{ github.event.inputs.ecs_cluster }}"
        SERVICE_NAME="${{ github.event.inputs.service_name }}"
        ECR_REPOSITORY="${{ github.event.inputs.ecr_repository }}"
        IMAGE_TAG="${{ github.event.inputs.image_tag }}"
        STACK_NAME="${{ github.event.inputs.stack }}"
        
        # Construir a URI completa da imagem
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
        
        echo "üê≥ Nova imagem: ${IMAGE_URI}"
        
        # ========================================
        # 1. ATUALIZAR CONFIG DO PULUMI
        # ========================================
        echo "‚öôÔ∏è Atualizando configura√ß√£o do Pulumi..."
        
        # Selecionar stack
        pulumi stack select ${STACK_NAME}
        
        CONFIG_KEY="valornet-infra:${{github.event.inputs.pulumi_service_name}}.imageTag"
        
        echo "üìù Atualizando config: ${CONFIG_KEY} = ${IMAGE_TAG}"
        pulumi config set ${CONFIG_KEY} ${IMAGE_TAG}
        
        echo "‚úÖ Configura√ß√£o do Pulumi atualizada!"
        
        # ========================================
        # 2. ATUALIZAR ECS SERVICE
        # ========================================
        echo "üöÄ Atualizando servi√ßo ECS..."
        
        # Obter a task definition atual
        echo "üìã Obtendo task definition atual..."
        TASK_DEFINITION_ARN=$(aws ecs describe-services \
          --cluster ${CLUSTER_NAME} \
          --services ${SERVICE_NAME} \
          --query 'services[0].taskDefinition' \
          --output text)
        
        echo "üìÑ Task Definition ARN: ${TASK_DEFINITION_ARN}"
        
        # Baixar a task definition atual
        aws ecs describe-task-definition \
          --task-definition ${TASK_DEFINITION_ARN} \
          --query 'taskDefinition' \
          --output json > task-definition.json
        
        # Atualizar a imagem na task definition
        echo "üîß Atualizando imagem na task definition..."
        
        # Usar jq para atualizar a imagem (assumindo que √© o primeiro container)
        jq --arg IMAGE_URI "${IMAGE_URI}" \
          '.containerDefinitions[0].image = $IMAGE_URI | 
           del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
          task-definition.json > new-task-definition.json
        
        echo "üìã Nova task definition:"
        cat new-task-definition.json | jq '.containerDefinitions[0].image'
        
        # Registrar nova task definition
        echo "üìù Registrando nova task definition..."
        NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://new-task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "‚úÖ Nova task definition registrada: ${NEW_TASK_DEFINITION_ARN}"
        
        # Atualizar o servi√ßo com a nova task definition
        echo "üöÄ Atualizando servi√ßo..."
        aws ecs update-service \
          --cluster ${CLUSTER_NAME} \
          --service ${SERVICE_NAME} \
          --task-definition ${NEW_TASK_DEFINITION_ARN} \
          --force-new-deployment
        
        echo "‚è≥ Aguardando estabiliza√ß√£o do servi√ßo..."
        
        # Aguardar estabiliza√ß√£o com timeout
        timeout 600 aws ecs wait services-stable \
          --cluster ${CLUSTER_NAME} \
          --services ${SERVICE_NAME} || {
            echo "‚ö†Ô∏è Timeout aguardando estabiliza√ß√£o, mas deployment foi iniciado"
            exit 0
          }
        
        # ========================================
        # 3. COMMIT MUDAN√áAS DO PULUMI (OPCIONAL)
        # ========================================
        echo "üíæ Fazendo commit das mudan√ßas na configura√ß√£o..."
        
        # Verificar se h√° mudan√ßas
        if git diff --quiet; then
          echo "‚ÑπÔ∏è Nenhuma mudan√ßa para commit"
        else
          git config --global user.email "ci@valornet.com"
          git config --global user.name "CI/CD Bot"
          
          git add Pulumi.${STACK_NAME}.yaml
          git commit -m "ci: update ${SERVICE_NAME} imageTag to ${IMAGE_TAG}
          
          Deploy info:
          - Service: ${SERVICE_NAME}
          - Stack: ${{ github.event.inputs.stack }}
          - Image Tag: ${IMAGE_TAG}
          - Commit SHA: ${{ github.event.inputs.commit_sha }}
          
          # Push mudan√ßas
          git push origin main
          
          echo "‚úÖ Configura√ß√£o commitada e enviada!"
        fi
        
        echo "üéâ Processo conclu√≠do com sucesso!"
        echo "üìä Resumo:"
        echo "  - Config Pulumi: ‚úÖ Atualizada"
        echo "  - ECS Service: ‚úÖ Atualizado"
        echo "  - Servi√ßo: ${SERVICE_NAME}"
        echo "  - Nova imagem: ${IMAGE_TAG}"